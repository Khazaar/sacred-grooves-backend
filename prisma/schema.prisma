// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int          @id @default(autoincrement())
  auth0sub        String?      @unique
  nickName        String?
  firstName       String?
  lastName        String?
  telegramName    String?
  email           String       @unique
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  artist          Artist?
  organizer       Organizer?
  visitor         Visitor?
  moderator       Moderator?
  supportTeam     SupportTeam?
  mapLocation     MapLocation? @relation(fields: [locationId], references: [id])
  roles           String[]
  avatar          Picture?     @relation(fields: [avatarPictureId], references: [id])
  avatarPictureId Int?         @unique
  locationId      Int?
}

model Artist {
  id          Int          @id @default(autoincrement())
  userId      Int          @unique
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  events      Event[]
  isApproved  Boolean      @default(false)
  artistTypes ArtistType[]
  musicSlyles MusicStyle[]

}

model Organizer {
  id           Int     @id @default(autoincrement())
  userId       Int     @unique
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  mainLocation String?
  events       Event[]
  isApproved   Boolean @default(false)
  @@map("organizer")
}

model Visitor {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id              Int          @id @unique @default(autoincrement())
  name            String
  description     String
  ogranizerId     Int
  ogranizer       Organizer    @relation(fields: [ogranizerId], references: [id], onDelete: Cascade)
  artistId       Int
  artists         Artist       @relation(fields: [artistId], references: [id], onDelete: Cascade)
  visitorsId      Int?
  mapLocation     MapLocation? @relation(fields: [locationId], references: [id])
  dateStart       DateTime?
  dateEnd         DateTime?
  isApproved      Boolean      @default(false)
  poster          Picture?     @relation(fields: [posterPictureId], references: [id])
  posterPictureId Int?         @unique
  locationId      Int?
}

model Moderator {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ArtistType {
  id              Int     @id @default(autoincrement())
  artistId        Int?
  artist          Artist? @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistTypeName String  @unique
}

model MusicStyle {
  id             Int     @id @default(autoincrement())
  musicStyleName String  @unique
  artistId       Int?
  artist         Artist? @relation(fields: [artistId], references: [id], onDelete: Cascade)
}

model SupportTeam {
  id            Int  @id @default(autoincrement())
  supportTeamId Int  @unique
  user          User @relation(fields: [supportTeamId], references: [id], onDelete: Cascade)
}

model Picture {
  id           Int    @id @default(autoincrement())
  title        String
  pictureS3Url String
  User         User?
  Event        Event?
}

model MapLocation {
  id        Int     @id @default(autoincrement())
  name      String?
  latitude  Float?
  longitude Float?
  address   String?
  city      String?
  country   String?
  User      User[]
  Event     Event[]
}
